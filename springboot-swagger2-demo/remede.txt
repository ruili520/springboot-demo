很多时候，我们需要创建一个接口项目用来数据调转，其中不包含任何业务逻辑，这时我们就需要实现一个具有Restful API的接口项目。
本文介绍springboot使用swagger2实现Restful API。
本项目使用mysql+jpa+swagger2。
首先pom中加入swagger2，代码如下：
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.2.2</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.2.2</version>
        </dependency>
配置文件，和整合jpa一样

##端口号
server.port=88

##数据库配置
##数据库地址
spring.datasource.url=jdbc:mysql://localhost:3306/springboot-demo?characterEncoding=utf8&useSSL=false
##数据库用户名
spring.datasource.username=root
##数据库密码
spring.datasource.password=root
##数据库驱动
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

spring.jpa.database=mysql

在controller控制层添加注解：
类似于：（参考controller文件）
@RestController
@RequestMapping(value="/users")
@Api(value="用户操作接口",tags={"用户操作接口"})
public class UserSwagger {

    @Autowired
    UserRepository userRepository;

    @ApiOperation(value="获取用户详细信息", notes="根据用户的id来获取用户详细信息")
    @ApiImplicitParam(name = "id", value = "用户ID", required = true,paramType = "query", dataType = "Integer")
    @GetMapping(value="/findById")
    public User findById(@RequestParam(value = "id")int id){
        User user = userRepository.findById(id);
        return user;
    }

    @ApiOperation(value="获取用户列表", notes="获取用户列表")
    @GetMapping(value="/getUserList")
    public List getUserList(){
        return userRepository.findAll();
    }


    @ApiOperation(value="保存用户", notes="保存用户")
    @PostMapping(value="/saveUser")
    public String saveUser(@RequestBody @ApiParam(name="用户对象",value="传入json格式",required=true) User user){
        userRepository.save(user);
        return "success!";
    }

    @ApiOperation(value="修改用户", notes="修改用户")
    @ApiImplicitParams({
            @ApiImplicitParam(name="id",value="主键id",required=true,paramType="query",dataType="Integer"),
            @ApiImplicitParam(name="username",value="用户名称",required=true,paramType="query",dataType = "String"),
            @ApiImplicitParam(name="password",value="用户密码",required=true,paramType="query",dataType = "String")
    })
    @GetMapping(value="/updateUser")
    public String updateUser(@RequestParam(value = "id")int id,@RequestParam(value = "username")String username,
                             @RequestParam(value = "password")String password){
        User user = new User(id, username, password);
        userRepository.save(user);
        return "success!";
    }


    @ApiOperation(value="删除用户", notes="根据用户的id来删除用户")
    @ApiImplicitParam(name = "id", value = "用户ID", required = true,paramType = "query", dataType = "Integer")
    @DeleteMapping(value="/deleteUserById")
    public String deleteUserById(@RequestParam(value = "id")int id){
        User user = userRepository.findById(id);
        userRepository.delete(user);
        return "success!";
    }

}

启动项目，访问http://localhost:88/swagger-ui.html ，即可查看swagger生成的在线接口文档

